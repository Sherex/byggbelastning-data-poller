CREATE TABLE IF NOT EXISTS "location_type" (
  "id"            INT             PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "code"          TEXT            UNIQUE NOT NULL,
  "name"          TEXT
);

CREATE TABLE IF NOT EXISTS "location" (
  "id"            INT             PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "type_id"       INT             NOT NULL REFERENCES "location_type" ("id"),
  "name"          TEXT            NOT NULL
  UNIQUE(name, type_id)
);

CREATE TABLE IF NOT EXISTS "building" (
  "id"            INT             PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "location_id"   INT             NOT NULL REFERENCES "location" ("id") ON DELETE CASCADE,
  "name"          TEXT            NOT NULL,
  UNIQUE(name, location_id)
);

CREATE TABLE IF NOT EXISTS "floor" (
  "id"            INT             PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "building_id"   INT             NOT NULL REFERENCES "building" ("id") ON DELETE CASCADE,
  "mse_floor_id"  TEXT            UNIQUE NOT NULL,
  "deleted"       BOOLEAN         NOT NULL DEFAULT false
  "name"          TEXT            NOT NULL,
  UNIQUE(name, building_id)
);

CREATE TABLE IF NOT EXISTS "client_count" (
  "time"          TIMESTAMPTZ     NOT NULL,
  "floor_id"      INT             NOT NULL REFERENCES "floor" ("id") ON DELETE CASCADE,
  "auth_count"    INTEGER         ,
  "asso_count"    INTEGER         ,
  UNIQUE(time, floor_id)
);

CREATE TABLE IF NOT EXISTS "client_coordinate" (
  "floor_id"      INT             NOT NULL REFERENCES "floor" ("id") ON DELETE CASCADE,
  "first_located" TIMESTAMPTZ     NOT NULL,
  "last_located"  TIMESTAMPTZ     NOT NULL,
  "cid"           TEXT            NOT NULL,
  "x"             NUMERIC(10, 4)  NOT NULL,
  "y"             NUMERIC(10, 4)  NOT NULL,
  UNIQUE (first_located, floor_id, cid, x, y)
);

CREATE INDEX IF NOT EXISTS idx_client_coordinate_last_located ON client_coordinate(last_located);

CREATE TABLE IF NOT EXISTS "floor_image" (
  "id"            INT             PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "floor_id"      INT             UNIQUE NOT NULL REFERENCES "floor" ("id") ON DELETE CASCADE,
  "image_base64"  TEXT            ,
  "image_length"  NUMERIC(10, 6)  ,
  "image_width"   NUMERIC(10, 6)  ,
  "image_offsetX" NUMERIC(10, 6)  ,
  "image_offsetY" NUMERIC(10, 6)
);

CREATE MATERIALIZED VIEW location_view AS
  SELECT
    l.id AS location_id,
    l.name AS location_name,
    lt.id AS location_type_id,
    lt.code AS location_type,
    lt.name AS location_type_name,
    CONCAT(lt.code, ' ', l.name) AS location_fullname,
    b.id AS building_id,
    b.name AS building_name,
    f.id AS floor_id,
    f.mse_floor_id,
    f.name AS floor_name
  FROM floor f
  INNER JOIN building b
    ON f.building_id = b.id
  INNER JOIN "location" l
    ON b.location_id = l.id
  INNER JOIN location_type lt
    ON l.type_id = lt.id
  ORDER BY
    l.name,
    b.name,
    f.name;

SELECT create_hypertable('client_count', 'time', if_not_exists => TRUE);

SELECT create_hypertable('client_coordinate', 'first_located', if_not_exists => TRUE);

CREATE TYPE location_ids_names AS (
  "location_id" INT,
  "building_id" INT,
  "floor_id"    INT,
  "location"    TEXT,
  "building"    TEXT,
  "floor"       TEXT
);

CREATE FUNCTION get_id_from_names(
	location TEXT,
	building TEXT DEFAULT '',
	floor TEXT DEFAULT ''
) RETURNS location_ids_names AS $$
    SELECT
      l.id,
      b.id,
      f.id,
      l.name,
      b.name,
      f.name
      FROM (
        SELECT 
          l2.id,
          l2.name
        FROM location l2
        WHERE l2.name = location
      ) AS l
      LEFT JOIN building b
        ON
          b.location_id = l.id AND
          b.name = building
      LEFT JOIN floor f
        ON
          f.building_id = b.id AND
          f.name = floor
$$ LANGUAGE SQL;

CREATE FUNCTION get_names_from_floor_id (
	floor_id INT
) RETURNS location_ids_names AS $$
    SELECT
      l.id,
      b.id,
      f.id,
      l.name,
      b.name,
      f.name
	FROM floor f
	LEFT JOIN building b
	  ON f.building_id = b.id
	LEFT JOIN "location" l
	  ON b.location_id = l.id
	WHERE
	  f.id = floor_id;
$$ LANGUAGE SQL;
